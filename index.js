require('dotenv').config();
const { Telegraf } = require('telegraf');
const { YooCheckout } = require('@a2seven/yoo-checkout');
const { MongoClient } = require('mongodb');
const express = require('express');
const crypto = require('crypto');
const cron = require('node-cron');
const CryptoCloudSDK = require('./sdk/CryptoCloudSDK');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ .env
const ADMINS = process.env.ADMINS ? process.env.ADMINS.split(',').map(id => id.trim()) : [];

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
function isAdmin(userId) {
    return ADMINS.includes(userId.toString());
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YooKassa
const checkout = new YooCheckout({
    shopId: process.env.YOOKASSA_SHOP_ID,
    secretKey: process.env.YOOKASSA_SECRET_KEY
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CryptoCloud
const cryptoCloud = new CryptoCloudSDK(process.env.CRYPTOCLOUD_API_KEY);

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
let db;
let paymentsCollection;
let subscriptionsCollection;

// –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ–∂–∏–¥–∞–Ω–∏–µ email)
const userStates = {};

async function activateSubscription(userId, paymentInfo, paymentMethod = 'yookassa') {
    const expiresAt = new Date();
    expiresAt.setMonth(expiresAt.getMonth() + 1);

    await subscriptionsCollection.updateOne(
        { userId },
        {
            $set: {
                userId,
                status: 'active',
                currentPeriodEnd: expiresAt,
                autoRenew: true,
                lastPaymentId: paymentInfo.id || paymentInfo.uuid,
                paymentMethod: paymentMethod,
                amount: paymentInfo.amount?.value || paymentInfo.amount,
                updatedAt: new Date()
            }
        },
        { upsert: true }
    );
}

async function connectToDatabase() {
    try {
        const client = new MongoClient(process.env.MONGODB_URI);
        await client.connect();
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');
        
        db = client.db();
        paymentsCollection = db.collection('payments');
        subscriptionsCollection = db.collection('subscriptions');

        // –∏–Ω–¥–µ–∫—Å—ã
        await subscriptionsCollection.createIndex({ userId: 1 }, { unique: true });
        await subscriptionsCollection.createIndex({ status: 1 });
        await subscriptionsCollection.createIndex({ currentPeriodEnd: 1 });
        await paymentsCollection.createIndex({ userId: 1 });
        await paymentsCollection.createIndex({ yooId: 1 });
        await paymentsCollection.createIndex({ cryptoCloudId: 1 });
        await paymentsCollection.createIndex({ status: 1 });
        await paymentsCollection.createIndex({ createdAt: 1 });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
        process.exit(1);
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
async function createPayment(paymentData) {
    const result = await paymentsCollection.insertOne({
        ...paymentData,
        createdAt: new Date(),
        updatedAt: new Date()
    });
    return result.insertedId;
}

async function getPayment(query) {
    return await paymentsCollection.findOne(query);
}

async function updatePayment(query, updateData) {
    return await paymentsCollection.updateOne(query, {
        $set: { ...updateData, updatedAt: new Date() }
    });
}

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON
app.use(express.json());

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞
async function isUserInChat(userId) {
    try {
        const chatId = process.env.CHANNEL_ID;
        const member = await bot.telegram.getChatMember(chatId, userId);
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
        return ['creator', 'administrator', 'member', 'restricted'].includes(member.status);
    } catch (error) {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞
        if (error.response && error.response.description.includes('user not found')) {
            return false;
        }
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–∞—Ç–∞:', error);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —á–∞—Ç–∞
async function isChatOwner(userId) {
    try {
        const chatId = process.env.CHANNEL_ID;
        const member = await bot.telegram.getChatMember(chatId, userId);
        return member.status === 'creator';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —á–∞—Ç–∞:', error);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç/–∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É
async function addUserToChat(userId) {
    try {
        const chatId = process.env.CHANNEL_ID;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
        const isAlreadyMember = await isUserInChat(userId);
        if (isAlreadyMember) {
            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É–∂–µ –≤ —á–∞—Ç–µ`);
            return { success: true, alreadyMember: true, link: null };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
        const isOwner = await isChatOwner(userId);
        if (isOwner) {
            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} - –≤–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞`);
            return { success: true, isOwner: true, link: null };
        }

        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        const chat = await bot.telegram.getChat(chatId);

        // –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É
        let inviteLink = null;
        try {
            inviteLink = await bot.telegram.exportChatInviteLink(chatId);
        } catch (linkError) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É:', linkError.message);
        }

        if (inviteLink) {
            console.log(`üîó –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∞ –¥–ª—è ${userId}: ${inviteLink}`);

            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –æ–Ω –±—ã–ª –∫–∏–∫–Ω—É—Ç)
            try {
                await bot.telegram.unbanChatMember(chatId, userId);
            } catch (unbanError) {
                if (!(unbanError.response && unbanError.response.description.includes('not banned'))) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', unbanError);
                }
            }

            return { success: true, link: inviteLink, type: chat.type };
        }

        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É');

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        return { success: false, error: error.message };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É
async function checkChatAccess() {
    try {
        const chatId = process.env.CHANNEL_ID;

        // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ, –µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç
        if (!bot.botInfo) {
            bot.botInfo = await bot.telegram.getMe();
        }

        const chat = await bot.telegram.getChat(chatId);
        console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:', {
            id: chat.id,
            type: chat.type,
            title: chat.title
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
        const member = await bot.telegram.getChatMember(chatId, bot.botInfo.id);
        console.log('üëÆ –ü—Ä–∞–≤–∞ –±–æ—Ç–∞:', member.status);

        return true;
    } catch (error) {
        console.error('‚ùå –ß–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
        return false;
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –Æ–ö–∞—Å—Å—ã
function verifyNotificationSignature(body, signature, secret) {
    const message = `${body.event}.${body.object.id}`;
    const hmac = crypto.createHmac('sha256', secret);
    hmac.update(message);
    return signature === hmac.digest('hex');
}

// –ö–æ–º–∞–Ω–¥–∞ /start —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
bot.command('start', async (ctx) => {
    try {
        const userId = ctx.from.id;
        
        if (isAdmin(userId)) {
            return ctx.reply('‚öôÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üöÄ –í–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É', callback_data: 'admin_panel' }]
                    ]
                }
            });
        }

        const isMember = await isUserInChat(userId);
        if (isMember) {
            return ctx.replyWithMarkdown(`
‚úÖ *–í—ã —É–∂–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É!*

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.
            `, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üìå –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞', callback_data: 'mysub' }],
                        [{ 
                            text: 'üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', 
                            url: 'https://t.me/golube123' 
                        }]
                    ]
                }
            });
        }
        
        ctx.replyWithMarkdown(`
üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ!*

–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –º–µ—Å—è—Ü.

üíé *–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏:*
‚úîÔ∏è –î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º
‚úîÔ∏è –ó–∞–∫—Ä—ã—Ç—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
‚úîÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚úîÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π

–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: *100 —Ä—É–±–ª–µ–π*

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã

–ø—Ä–æ–¥–æ–ª–∂–∞—è –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –æ—Ñ–µ—Ä—Ç–æ–π:
        `, {
            reply_markup: {
                inline_keyboard: [
                    [{ 
                        // text: 'üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ (–ÆKassa)', 
                        text: 'üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞', 
                        callback_data: 'choose_payment:yookassa' 
                    }],
                    [{ 
                        text: '‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (CryptoCloud)', 
                        callback_data: 'choose_payment:cryptocloud' 
                    }],
                    [{ 
                        text: 'üìÉ –û—Ñ–µ—Ä—Ç–∞',
                        callback_data: 'show_oferta' 
                    }],
                    [{ 
                        text: '‚ùì –ü–æ–º–æ—â—å', 
                        url: 'https://t.me/golube123' 
                    }]
                ]
            }
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start:', error);
        ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
bot.action(/choose_payment:(.+)/, async (ctx) => {
    const paymentMethod = ctx.match[1];
    const userId = ctx.from.id;
    const paymentId = `${paymentMethod}_${Date.now()}_${userId}`;

    try {
        const isMember = await isUserInChat(userId);
        if (isMember) {
            await ctx.editMessageText(`
‚úÖ *–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É!*

–û–ø–ª–∞—Ç–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.
            `, { parse_mode: 'Markdown' });
            return ctx.answerCbQuery();
        }

        await createPayment({
            _id: paymentId,
            userId: userId,
            paymentMethod: paymentMethod,
            status: 'pending',
            username: ctx.from.username || '–Ω–µ—Ç username',
            firstName: ctx.from.first_name || '',
            lastName: ctx.from.last_name || '',
            isRecurring: false // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é false
        });

        if (paymentMethod === 'yookassa') {
            await ctx.editMessageText(`
üîí *–û–ø–ª–∞—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π*

–í—ã –æ—Ñ–æ—Ä–º–ª—è–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ:
‚ñ´Ô∏è –°—É–º–º–∞: *100 —Ä—É–±–ª–µ–π*
‚ñ´Ô∏è –°—Ä–æ–∫: *1 –º–µ—Å—è—Ü*
‚ñ´Ô∏è –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: *–î–∞, –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è*

–î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏. –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö.

*–•–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ?*
            `, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ 
                            text: '‚úÖ –î–∞, –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ', 
                            callback_data: `set_recurring:true:${paymentId}` 
                        }],
                        [{ 
                            text: '‚ùå –ù–µ—Ç, —Ç–æ–ª—å–∫–æ —Ä–∞–∑–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂', 
                            callback_data: `set_recurring:false:${paymentId}` 
                        }],
                        [{ 
                            text: 'üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –æ–ø–ª–∞—Ç—ã', 
                            callback_data: 'back_to_payment_methods' 
                        }]
                    ]
                }
            });
        } else if (paymentMethod === 'cryptocloud') {
            await ctx.editMessageText(`
üîí *–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π*

–í—ã –æ—Ñ–æ—Ä–º–ª—è–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ:
‚ñ´Ô∏è –°—É–º–º–∞: *100 —Ä—É–±–ª–µ–π* (–≤ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–µ)
‚ñ´Ô∏è –°—Ä–æ–∫: *1 –º–µ—Å—è—Ü*
‚ñ´Ô∏è –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: *–ù–µ—Ç* (–¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)

–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–ª–∞—Ç–µ–∂:
            `, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ 
                            text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É', 
                            callback_data: `confirm_crypto_pay:${paymentId}` 
                        }],
                        [{ 
                            text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 
                            callback_data: `cancel_pay:${paymentId}` 
                        }]
                    ]
                }
            });
        }

        ctx.answerCbQuery();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ choose_payment:', error);
        ctx.answerCbQuery('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–ª–∞—Ç–µ–∂–∞ (—Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–π/—Ä–∞–∑–æ–≤—ã–π)
bot.action(/set_recurring:(true|false):(.+)/, async (ctx) => {
    const isRecurring = ctx.match[1] === 'true';
    const paymentId = ctx.match[2];
    const userId = ctx.from.id;

    try {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
        await updatePayment(paymentId, { isRecurring });

        const paymentText = isRecurring 
            ? '‚úÖ *–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ*\n\n–ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å —ç—Ç–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–ª–∞—Ç–µ–∂–µ–π.'
            : '‚ö†Ô∏è *–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ*\n\n–ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ 1 –º–µ—Å—è—Ü. –î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–ª–∞—Ç–µ–∂ –ø–æ–≤—Ç–æ—Ä–Ω–æ.';

        await ctx.editMessageText(`
üîí *–û–ø–ª–∞—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π*

–í—ã –æ—Ñ–æ—Ä–º–ª—è–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ:
‚ñ´Ô∏è –°—É–º–º–∞: *100 —Ä—É–±–ª–µ–π*
‚ñ´Ô∏è –°—Ä–æ–∫: *1 –º–µ—Å—è—Ü*
‚ñ´Ô∏è –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: *${isRecurring ? '–î–∞' : '–ù–µ—Ç'}*

${paymentText}

–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–ª–∞—Ç–µ–∂:
        `, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ 
                        text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É', 
                        callback_data: `confirm_pay:${paymentId}` 
                    }],
                    [{ 
                        text: 'üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞', 
                        callback_data: `choose_payment:yookassa` 
                    }],
                    [{ 
                        text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 
                        callback_data: `cancel_pay:${paymentId}` 
                    }]
                ]
            }
        });

        ctx.answerCbQuery();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ set_recurring:', error);
        ctx.answerCbQuery('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
});


bot.action('show_oferta', async (ctx) => {
    try {
        await ctx.answerCbQuery();
        await ctx.replyWithDocument({ source: './oferta.txt' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ñ–µ—Ä—Ç—ã:', error);
        await ctx.reply('‚ö†Ô∏è –û—Ñ–µ—Ä—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    }
});

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π
bot.action(/confirm_crypto_pay:(.+)/, async (ctx) => {
    const paymentId = ctx.match[1];
    const userId = ctx.from.id;

    try {
        const isMember = await isUserInChat(userId);
        if (isMember) {
            await ctx.editMessageText(
                `‚úÖ *–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É!*\n\n–û–ø–ª–∞—Ç–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.`,
                { 
                    parse_mode: 'Markdown',
                    reply_markup: { inline_keyboard: [] }
                }
            );
            return ctx.answerCbQuery();
        }

        const paymentData = await getPayment({ _id: paymentId, userId });
        if (!paymentData) {
            return ctx.answerCbQuery('‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        await ctx.editMessageText('üîÑ *–°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã...*', { 
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: [] }
        });

        // –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        let userEmail;
        if (ctx.from.username) {
            userEmail = `${ctx.from.username}@telegram.org`;
        } else {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π email –Ω–∞ –æ—Å–Ω–æ–≤–µ ID –∏ –≤—Ä–µ–º–µ–Ω–∏
            userEmail = `user${userId}_${Date.now()}@telegram.org`;
        }

        // –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –≤ CryptoCloud —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        const invoiceData = {
            amount: 100,
            currency: 'RUB',
            shop_id: process.env.CRYPTOCLOUD_SHOP_ID,
            order_id: paymentId,
            email: userEmail,
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            description: `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`,
            // –£–∫–∞–∑—ã–≤–∞–µ–º –≤–∞–ª—é—Ç—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Å—á–µ—Ç (–º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –≤–∞–ª—é—Ç—ã –æ–ø–ª–∞—Ç—ã)
            invoice_currency: 'RUB',
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_data: {
                user_id: userId.toString(),
                username: ctx.from.username || 'unknown',
                first_name: ctx.from.first_name || '',
                last_name: ctx.from.last_name || ''
            }
        };

        console.log('Creating CryptoCloud invoice with data:', invoiceData);

        try {
            const invoice = await cryptoCloud.createInvoice(invoiceData);
            console.log('CryptoCloud response:', invoice);

            if (invoice.status === 'success' && (invoice.result?.pay_url || invoice.result?.link)) {
                const paymentUrl = invoice.result.pay_url || invoice.result.link;
                
                await updatePayment(
                    { _id: paymentId },
                    { 
                        cryptoCloudId: invoice.result.uuid,
                        status: 'waiting_for_payment',
                        paymentUrl: paymentUrl,
                        userEmail: userEmail
                    }
                );

                await ctx.editMessageText(
                    `üîó *–°—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å–æ–∑–¥–∞–Ω!*\n\n–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n\n–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É.\n\n‚è∞ *–°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç*`,
                    {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: 'üåê –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ',
                                    url: paymentUrl
                                }],
                                [{
                                    text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É',
                                    callback_data: `check_crypto_payment:${paymentId}`
                                }]
                            ]
                        }
                    }
                );
            } else {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
                const errorMessage = invoice.error || invoice.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞';
                console.error('CryptoCloud error details:', invoice);
                throw new Error(`–û—à–∏–±–∫–∞ CryptoCloud: ${errorMessage}`);
            }

        } catch (apiError) {
            console.error('CryptoCloud API error:', apiError);
            throw new Error(`–û—à–∏–±–∫–∞ API CryptoCloud: ${apiError.message}`);
        }

    } catch (error) {
        console.error('–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ confirm_crypto_pay:', error);
        await ctx.editMessageText(
            `‚ö†Ô∏è *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞*\n\n${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`,
            { 
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ 
                            text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π', 
                            callback_data: `choose_payment:yookassa` 
                        }],
                        [{ 
                            text: 'üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', 
                            url: 'https://t.me/golube123' 
                        }]
                    ]
                }
            }
        );
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏–ø—Ç–æ-–ø–ª–∞—Ç–µ–∂–∞
bot.action(/check_crypto_payment:(.+)/, async (ctx) => {
    const paymentId = ctx.match[1];
    const userId = ctx.from.id;

    try {
        ctx.answerCbQuery('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂...');
        
        const isMember = await isUserInChat(userId);
        if (isMember) {
            await ctx.editMessageText(`
‚úÖ *–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É!*

–û–ø–ª–∞—Ç–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.
            `, { parse_mode: 'Markdown' });
            return;
        }

        const paymentData = await getPayment({ _id: paymentId, userId: userId });
        if (!paymentData || !paymentData.cryptoCloudId) {
            throw new Error('–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞ –≤ CryptoCloud
        const invoiceInfo = await cryptoCloud.getInvoiceInfo([paymentData.cryptoCloudId]);

        if (invoiceInfo.status === 'success' && invoiceInfo.result[0]?.status === 'paid') {
            const invoice = invoiceInfo.result[0];
            const result = await addUserToChat(userId);

            await updatePayment(
                { _id: paymentId },
                { 
                    status: 'completed',
                    paidAt: new Date(),
                    amount: invoice.amount
                }
            );
            
            await activateSubscription(userId, invoice, 'cryptocloud');

            let message = `üéâ *–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n`;
            
            if (result.success) {
                if (result.alreadyMember) {
                    message += `‚úÖ –í—ã —É–∂–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É!\n\n`;
                } else if (result.isOwner) {
                    message += `üëë –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞!\n\n`;
                } else if (result.link) {
                    message += `–í–æ—Ç –≤–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:\n${result.link}\n\n`;
                } else {
                    message += `‚úÖ –í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤.\n\n`;
                }
                
                message += `üìå *–í–∞–∂–Ω–æ:* –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!`;
                
                await ctx.editMessageText(message, {
                    parse_mode: 'Markdown',
                    reply_markup: result.link ? {
                        inline_keyboard: [
                            [{ text: 'üìå –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞', callback_data: 'mysub' }],
                            [{ text: 'üöÄ –ü–µ—Ä–µ–π—Ç–∏ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ', url: result.link }],
                            [{ text: 'üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', url: 'https://t.me/golube123' }]
                        ]
                    } : null
                });
            } else {
                await ctx.editMessageText(`
‚úÖ *–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*

–û–¥–Ω–∞–∫–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.
                `, { parse_mode: 'Markdown' });
            }

        } else {
            ctx.answerCbQuery('‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω', { show_alert: true });
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ check_crypto_payment:', error);
        ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞', { show_alert: true });
    }
});

// –í–µ–±—Ö—É–∫ –¥–ª—è CryptoCloud
app.post('/cryptocloud-webhook', async (req, res) => {
    try {
        const webhookData = req.body;
        const invoiceId = webhookData.invoice_id || webhookData.uuid;
        
        if (webhookData.status === 'paid') {
            const paymentData = await getPayment({ cryptoCloudId: invoiceId });
            if (!paymentData) {
                return res.status(404).send('Payment not found');
            }

            const userId = paymentData.userId;
            const isMember = await isUserInChat(userId);
            
            if (isMember) {
                await updatePayment(
                    { cryptoCloudId: invoiceId },
                    {
                        status: 'already_member',
                        paidAt: new Date(),
                        amount: webhookData.amount,
                        updatedAt: new Date()
                    }
                );
                
                await bot.telegram.sendMessage(userId, `
‚úÖ *–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*

–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.
                `, { parse_mode: 'Markdown' });
                
                return res.status(200).send();
            }

            const result = await addUserToChat(userId);

            await updatePayment(
                { cryptoCloudId: invoiceId },
                {
                    status: 'completed',
                    paidAt: new Date(),
                    amount: webhookData.amount,
                    updatedAt: new Date()
                }
            );

            await activateSubscription(userId, webhookData, 'cryptocloud');

            let message = `üéâ *–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n`;
            
            if (result.success) {
                if (result.alreadyMember) {
                    message += `‚úÖ –í—ã —É–∂–µ –∏–º–µ–µ—Ç–µ acceso –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É!\n\n`;
                } else if (result.isOwner) {
                    message += `üëë –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞!\n\n`;
                } else if (result.link) {
                    message += `–í–æ—Ç –≤–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:\n${result.link}\n\n`;
                } else {
                    message += `‚úÖ –í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤.\n\n`;
                }
                
                message += `üìå *–í–∞–∂–Ω–æ:* –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!`;
                
                await bot.telegram.sendMessage(userId, message, {
                    parse_mode: 'Markdown',
                    reply_markup: result.link ? {
                        inline_keyboard: [
                            [{ text: 'üöÄ –ü–µ—Ä–µ–π—Ç–∏ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ', url: result.link }]
                        ]
                    } : null
                });
            } else {
                await bot.telegram.sendMessage(userId, `
‚úÖ *–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*

–û–¥–Ω–∞–∫–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.
                `, { parse_mode: 'Markdown' });
            }
        }

        res.status(200).send();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ CryptoCloud –≤–µ–±—Ö—É–∫–µ:', error);
        res.status(500).send();
    }
});

// –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å
bot.action('admin_panel', async (ctx) => {
    if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');

    await ctx.editMessageText('‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data: 'admin_users' }],
                [{ text: 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data: 'admin_check' }],
                [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' }],
                [{ text: '‚¨ÖÔ∏è –í—ã–π—Ç–∏', callback_data: 'admin_exit' }]
            ]
        }
    });
});

// –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.action('admin_users', async (ctx) => {
    if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');

    const users = await paymentsCollection.find().limit(10).toArray();
    let text = 'üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–µ—Ä–≤—ã–µ 10):*\n\n';
    users.forEach(u => {
        text += `‚Ä¢ ID: ${u.userId}, Username: @${u.username || '-'}, –°—Ç–∞—Ç—É—Å: ${u.status}\n`;
    });

    await ctx.editMessageText(text || '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç', {
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_panel' }]
            ]
        }
    });
});

bot.action("mysub", async (ctx) => {
    const sub = await subscriptionsCollection.findOne({ userId: ctx.from.id });
    if (!sub) {
        return ctx.editMessageText("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏");
    }

    await ctx.editMessageText(`
üìå *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ*
–°—Ç–∞—Ç—É—Å: ${sub.status}
–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: ${sub.autoRenew ? "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" : "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ"}
–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${sub.currentPeriodEnd.toLocaleDateString()}
    `, {
        parse_mode: "Markdown",
        reply_markup: {
            inline_keyboard: [
                [{ 
                    text: sub.autoRenew ? "‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ" : "üîÑ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ", 
                    callback_data: "toggle_autorenew" 
                }],
                [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_start" }]
            ]
        }
    });
});

bot.action("toggle_autorenew", async (ctx) => {
    const sub = await subscriptionsCollection.findOne({ userId: ctx.from.id });
    if (!sub) return ctx.answerCbQuery("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");

    const newStatus = !sub.autoRenew;
    await subscriptionsCollection.updateOne(
        { userId: ctx.from.id },
        { $set: { autoRenew: newStatus, updatedAt: new Date() } }
    );

    await ctx.editMessageText(`
üìå *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ*
–°—Ç–∞—Ç—É—Å: ${sub.status}
–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: ${newStatus ? "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" : "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ"}
–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${sub.currentPeriodEnd.toLocaleDateString()}
    `, {
        parse_mode: "Markdown",
        reply_markup: {
            inline_keyboard: [
                [{ 
                    text: newStatus ? "‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ" : "üîÑ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ", 
                    callback_data: "toggle_autorenew" 
                }],
                [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_start" }]
            ]
        }
    });
});

bot.action("back_to_start", async (ctx) => {
    await ctx.editMessageText(`
‚úÖ *–í—ã —É–∂–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É!*

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.
    `, {
        parse_mode: "Markdown",
        reply_markup: {
            inline_keyboard: [
                [{ text: "üìå –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data: "mysub" }],
                [{ text: "üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url: "https://t.me/golube123" }]
            ]
        }
    });
});

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.action('admin_check', async (ctx) => {
    if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');

    await ctx.editMessageText('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.\n\n‚¨ÖÔ∏è –ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞–∑–∞–¥¬ª —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è.', {
        reply_markup: {
            inline_keyboard: [
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_panel' }]
            ]
        }
    });

    // –ñ–¥—ë–º –≤–≤–æ–¥ ID
    bot.once('text', async (msgCtx) => {
        if (!isAdmin(msgCtx.from.id)) return;

        const queryId = parseInt(msgCtx.message.text.trim());
        const user = await paymentsCollection.findOne({ userId: queryId });

        if (user) {
            await msgCtx.replyWithMarkdown(`
üë§ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ*  
ID: \`${user.userId}\`  
Username: @${user.username || '-'}  
–ò–º—è: ${user.firstName || ''} ${user.lastName || ''}  
–°—Ç–∞—Ç—É—Å: ${user.status}  
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${user.createdAt}
            `, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É', callback_data: 'admin_panel' }]
                    ]
                }
            });
        } else {
            await msgCtx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É', callback_data: 'admin_panel' }]
                    ]
                }
            });
        }
    });
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
bot.action('admin_stats', async (ctx) => {
    if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');

    const totalUsers = await paymentsCollection.distinct('userId');
    const totalPayments = await paymentsCollection.countDocuments();

    await ctx.editMessageText(`
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*  
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers.length}  
üí≥ –ü–ª–∞—Ç–µ–∂–µ–π: ${totalPayments}
    `, {
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_panel' }]
            ]
        }
    });
});

// –í—ã—Ö–æ–¥
bot.action('admin_exit', async (ctx) => {
    await ctx.editMessageText('‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∏—Ç—å"
bot.action(/init_pay:(.+)/, async (ctx) => {
    const paymentId = ctx.match[1];
    const userId = ctx.from.id;

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–æ—Å—Ç—É–ø
        const isMember = await isUserInChat(userId);
        if (isMember) {
            await ctx.editMessageText(`
‚úÖ *–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É!*

–û–ø–ª–∞—Ç–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.
            `, { parse_mode: 'Markdown' });
            return ctx.answerCbQuery();
        }

        const paymentData = await getPayment({ _id: paymentId, userId: userId });
        if (!paymentData) {
            return ctx.answerCbQuery('‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        await ctx.editMessageText(`
üîí *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞*

–í—ã –æ—Ñ–æ—Ä–º–ª—è–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ:
‚ñ´Ô∏è –°—É–º–º–∞: *100 —Ä—É–±–ª–µ–π*
‚ñ´Ô∏è –°—Ä–æ–∫: *1 –º–µ—Å—è—Ü*
‚ñ´Ô∏è –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: *–ù–µ—Ç*

–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–ª–∞—Ç–µ–∂:
        `, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ 
                        text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É', 
                        callback_data: `confirm_pay:${paymentId}` 
                    }],
                    [{ 
                        text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 
                        callback_data: `cancel_pay:${paymentId}` 
                    }]
                ]
            }
        });

        ctx.answerCbQuery();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ init_pay:', error);
        ctx.answerCbQuery('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
});

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ (–∑–∞–ø—Ä–æ—Å email)
bot.action(/confirm_pay:(.+)/, async (ctx) => {
    const paymentId = ctx.match[1];
    const userId = ctx.from.id;

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–æ—Å—Ç—É–ø
        const isMember = await isUserInChat(userId);
        if (isMember) {
            await ctx.editMessageText(`
‚úÖ *–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É!*

–û–ø–ª–∞—Ç–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.
            `, { parse_mode: 'Markdown' });
            return ctx.answerCbQuery();
        }

        const paymentData = await getPayment({ _id: paymentId, userId: userId });
        if (!paymentData) {
            return ctx.answerCbQuery('‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        await ctx.editMessageText(`
üìß *–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —á–µ–∫–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–∞—à email*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å.
–û–Ω –Ω—É–∂–µ–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ –∏ –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å–ø–∞–º–∞.

*–í–≤–µ–¥–∏—Ç–µ email:*
        `, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ 
                        text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 
                        callback_data: `cancel_pay:${paymentId}` 
                    }]
                ]
            }
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ –º—ã –∂–¥–µ–º email –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        userStates[userId] = { waitingForEmail: true, paymentId: paymentId };

        ctx.answerCbQuery();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ confirm_pay:', error);
        ctx.editMessageText('‚ö†Ô∏è *–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞*', { parse_mode: 'Markdown' });
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email
bot.on('text', async (ctx) => {
    const userId = ctx.from.id;
    const state = userStates[userId];

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "–æ–∂–∏–¥–∞–Ω–∏—è email"
    if (state && state.waitingForEmail) {
        const email = ctx.message.text.trim();
        const paymentId = state.paymentId;

        // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
            return ctx.reply('‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ email –µ—â–µ —Ä–∞–∑:');
        }

        // –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        delete userStates[userId];

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î email
        await updatePayment(
            { _id: paymentId },
            { 
                userEmail: email // –°–æ—Ö—Ä–∞–Ω—è–µ–º email –≤ –±–∞–∑—É
            }
        );

        // –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa, –ø–µ—Ä–µ–¥–∞–≤–∞—è receipt
        await ctx.reply('üîÑ *–°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂...*', { parse_mode: 'Markdown' });

        try {
            const createPayload = {
                amount: { value: '100.00', currency: 'RUB' },
                payment_method_data: { type: 'bank_card' },
                confirmation: {
                    type: 'redirect',
                    return_url: `https://t.me/${ctx.botInfo.username}`
                },
                description: `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`,
                metadata: {
                    userId: userId,
                    paymentId: paymentId,
                    username: ctx.from.username || '–Ω–µ—Ç username'
                },
                capture: true,
                // save_payment_method: true,
                // –î–û–ë–ê–í–õ–Ø–ï–ú –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô receipt –î–õ–Ø –ß–ï–ö–ê 54-–§–ó
                receipt: {
                    customer: {
                        email: email // Email, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    },
                    items: [
                        {
                            description: `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ (1 –º–µ—Å—è—Ü)`,
                            quantity: "1",
                            amount: {
                                value: "100.00",
                                currency: "RUB"
                            },
                            vat_code: 1, // –°—Ç–∞–≤–∫–∞ –ù–î–°. 1 - –±–µ–∑ –ù–î–° (—Å–æ–≥–ª–∞—Å—É–π—Ç–µ —Å –±—É—Ö–≥–∞–ª—Ç–µ—Ä–æ–º!)
                            payment_mode: 'full_payment',
                            payment_subject: 'service'
                        }
                    ]
                }
            };

            const payment = await checkout.createPayment(createPayload);
            
            await updatePayment(
                { _id: paymentId },
                { 
                    yooId: payment.id,
                    status: 'waiting_for_capture',
                    paymentUrl: payment.confirmation.confirmation_url
                }
            );

            await ctx.reply(`
üîó *–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã*

–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.

–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É.
            `, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: 'üåê –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ',
                            url: payment.confirmation.confirmation_url
                        }],
                        [{
                            text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É',
                            callback_data: `check_payment:${paymentId}`
                        }]
                    ]
                }
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ —Å —á–µ–∫–æ–º:', error);
            ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
        }
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞
bot.action(/check_payment:(.+)/, async (ctx) => {
    const paymentId = ctx.match[1];
    const userId = ctx.from.id;

    try {
        ctx.answerCbQuery('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–æ—Å—Ç—É–ø
        const isMember = await isUserInChat(userId);
        if (isMember) {
            await ctx.editMessageText(`
‚úÖ *–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É!*

–û–ø–ª–∞—Ç–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.
            `, { 
                parse_mode: 'Markdown',
                reply_markup: { inline_keyboard: [] }
            });
            return;
        }

        const paymentData = await getPayment({ _id: paymentId, userId: userId });
        if (!paymentData || !paymentData.yooId) {
            throw new Error('–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const paymentInfo = await checkout.getPayment(paymentData.yooId);

        if (paymentInfo.status === 'succeeded') {
            const result = await addUserToChat(userId);

            await updatePayment(
                { _id: paymentId },
                { 
                    status: 'completed',
                    paidAt: new Date(),
                    amount: paymentInfo.amount.value
                }
            );
            
            await activateSubscription(userId, paymentInfo);

            let message = `üéâ *–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n`;
            
            if (result.success) {
                if (result.alreadyMember) {
                    message += `‚úÖ –í—ã —É–∂–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É!\n\n`;
                } else if (result.isOwner) {
                    message += `üëë –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞!\n\n`;
                } else if (result.link) {
                    message += `–í–æ—Ç –≤–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:\n${result.link}\n\n`;
                } else {
                    message += `‚úÖ –í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤.\n\n`;
                }
                
                message += `üìå *–í–∞–∂–Ω–æ:* –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!`;
                
                await ctx.editMessageText(message, {
                    parse_mode: 'Markdown',
                    reply_markup: result.link ? {
                        inline_keyboard: [
                            [{ text: 'üìå –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞', callback_data: 'mysub' }],
                            [{ text: 'üöÄ –ü–µ—Ä–µ–π—Ç–∏ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ', url: result.link }],
                            [{ text: 'üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', url: 'https://t.me/golube123' }]
                        ]
                    } : null
                });
            } else {
                await ctx.editMessageText(`
‚úÖ *–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*

–û–¥–Ω–∞–∫–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.
                `, { parse_mode: 'Markdown' });
            }

        } else {
            ctx.answerCbQuery('‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω', { show_alert: true });
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ check_payment:', error);
        ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞', { show_alert: true });
    }
});

// –û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞
bot.action(/cancel_pay:(.+)/, async (ctx) => {
    const paymentId = ctx.match[1];
    const userId = ctx.from.id;

    try {
        const paymentData = await getPayment({ _id: paymentId, userId: userId });
        
        if (paymentData?.yooId) {
            try {
                await checkout.cancelPayment(paymentData.yooId);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞:', error);
            }
        }

        await updatePayment(
            { _id: paymentId },
            { status: 'cancelled_by_user' }
        );

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è email, —É–¥–∞–ª—è–µ–º –µ–≥–æ
        if (userStates[userId]) {
            delete userStates[userId];
        }

        await ctx.editMessageText(`
üóë *–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω*

–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start

–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! ‚òÄÔ∏è
        `, { 
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: [] }
        });

        ctx.answerCbQuery();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ cancel_pay:', error);
        ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞');
    }
});

// –í–µ–±—Ö—É–∫ –¥–ª—è –Æ–ö–∞—Å—Å—ã
app.post('/yookassa-webhook', async (req, res) => {
    try {
        const signature = req.headers['content-signature'];
        
        if (!verifyNotificationSignature(req.body, signature, process.env.YOOKASSA_SECRET_KEY)) {
            console.error('–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
            return res.status(401).send();
        }

        const notification = req.body;
        const payment = notification.object;

        if (notification.event === 'payment.succeeded') {
            const paymentId = payment.metadata.paymentId;
            const userId = parseInt(payment.metadata.userId);

            const paymentData = await getPayment({ _id: paymentId, userId: userId });
            if (!paymentData) {
                return res.status(404).send('Payment not found');
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–æ—Å—Ç—É–ø
            const isMember = await isUserInChat(userId);
            if (isMember) {
                await updatePayment(
                    { _id: paymentId },
                    {
                        status: 'already_member',
                        paidAt: new Date(),
                        amount: payment.amount.value,
                        updatedAt: new Date()
                    }
                );
                
                await bot.telegram.sendMessage(userId, `
‚úÖ *–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*

–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.
                `, { parse_mode: 'Markdown' });
                
                return res.status(200).send();
            }

            const result = await addUserToChat(userId);

            await updatePayment(
                { _id: paymentId },
                {
                    status: 'completed',
                    paidAt: new Date(),
                    amount: payment.amount.value,
                    updatedAt: new Date()
                }
            );

            await activateSubscription(userId, payment);

            let message = `üéâ *–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n`;
            
            if (result.success) {
                if (result.alreadyMember) {
                    message += `‚úÖ –í—ã —É–∂–µ –∏–º–µ–µ—Ç–µ acceso –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É!\n\n`;
                } else if (result.isOwner) {
                    message += `üëë –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞!\n\n`;
                } else if (result.link) {
                    message += `–í–æ—Ç –≤–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:\n${result.link}\n\n`;
                } else {
                    message += `‚úÖ –í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤.\n\n`;
                }
                
                message += `üìå *–í–∞–∂–Ω–æ:* –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!`;
                
                await bot.telegram.sendMessage(userId, message, {
                    parse_mode: 'Markdown',
                    reply_markup: result.link ? {
                        inline_keyboard: [
                            [{ text: 'üöÄ –ü–µ—Ä–µ–π—Ç–∏ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ', url: result.link }]
                        ]
                    } : null
                });
            } else {
                await bot.telegram.sendMessage(userId, `
‚úÖ *–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*

–û–¥–Ω–∞–∫–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.
                `, { parse_mode: 'Markdown' });
            }
        }

        res.status(200).send();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –≤–µ–±—Ö—É–∫–µ:', error);
        res.status(500).send();
    }
});

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function startApp() {
    try {
        await connectToDatabase();
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É
        const chatAccess = await checkChatAccess();
        if (!chatAccess) {
            console.warn('‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —á–∞—Ç—É');
        }

        const PORT = process.env.PORT || 3000;
        app.listen(PORT, () => {
            console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
        });

        await bot.launch();
        console.log('ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');

    } catch (error) {
        console.error('‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
startApp();

// Graceful shutdown
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

cron.schedule('0 3 * * *', async () => {
    const now = new Date();
    const expiringSubs = await subscriptionsCollection.find({
        status: 'active',
        autoRenew: true,
        currentPeriodEnd: { $lte: now }
    }).toArray();

    for (const sub of expiringSubs) {
        try {
            const newPayment = await checkout.createPayment({
                amount: { value: '100.00', currency: 'RUB' },
                capture: true,
                payment_method_id: sub.paymentMethodId,
                description: `–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${sub.userId}`,
                metadata: { userId: sub.userId }
            });

            if (newPayment.status === 'succeeded') {
                await activateSubscription(sub.userId, newPayment);
                await bot.telegram.sendMessage(sub.userId, "‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ –º–µ—Å—è—Ü!");
            } else {
                await subscriptionsCollection.updateOne(
                    { userId: sub.userId },
                    { $set: { status: 'past_due' } }
                );
                await bot.telegram.sendMessage(sub.userId, "‚ö†Ô∏è –ê–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ /start");
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è:', err);
        }
    }
});